@page "/"

@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITicketService _ticketService


<AuthorizeView Roles="Admin">
    <Authorized>
        <NavLink href="dashboard">Dashboard</NavLink>
    </Authorized>
</AuthorizeView>
<AuthorizeView Roles="Programmer">
    <Authorized>
        <NavLink href="/createTicket">Create ticket</NavLink>
    </Authorized>
    <NotAuthorized>
        <p>To create ticket you need to be with a programmer role.</p>
    </NotAuthorized>
</AuthorizeView>
<ul style="list-style:none;">
    @foreach (Ticket t in tickets)
    {
        <NavLink href="/TicketDetails">
            <li style="background-color: gray;">@t.Title</li>
            <li style="background-color: gray;">@t.Content</li>
            <NavLink href="/editTicket">Edit ticket</NavLink>
            <NavLink href="/deleteTicket">Delete ticket</NavLink>
        </NavLink>
    }
</ul>



@code {
    List<Ticket> tickets = new();

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        List<Ticket> listOfTickets = new();

        if (user.IsInRole("Maintenance"))
        {
            tickets = (List<Ticket>)await _ticketService.GetAllTickets();
        }
        else if (user.IsInRole("Programmer"))
        {
            tickets = (List<Ticket>)await _ticketService.GetAllTicketsWithUsername(user.Identity.Name);
        }

    }


}