
<ul style="list-style:none;">
    @foreach (Ticket t in Tickets.OrderByDescending(t=>t.SendOn))
    {
        <li style="border:solid 2px black; margin:10px;padding:10px;">
            <i>Send by: @t.Author.UserName (@t.Author.Level)</i>
            <br />
            <i>Date: @t.SendOn</i>
            <br />
            <i style="text-align:right;">Chat(@t.ChatMessages.Count())</i>
            <h2>@t.Title</h2>
            <h4>@t.Content</h4>
            @* if details are on page with id send *@
            @*<NavLink href="@($"/detailsTicket/{t.TicketId}")"><a class="text-info">Details</a></NavLink>*@
            <button class="btn btn-info"
                    @onclick="@(async() => { await detailsTicketDialog.Show(t.TicketId);ticketId = t.TicketId; })">
                Details
            </button>
            <AuthorizeView Context="iContext">
                @if (iContext.User.Identity.Name == t.Author.UserName)
                {
                    <button class="btn btn-outline-info"
                            @onclick="@(async ()=> { await editTicketDialog.Show(t.TicketId);ticketId = t.TicketId; })">
                        Edit
                    </button>
                    <button class="btn btn-outline-danger"
                            @onclick="@(()=> { deleteTicketDialog.Show(); ticketId = t.TicketId; })">
                        Delete
                    </button>
                }
            </AuthorizeView>
        </li>
    }
</ul>
@* delete dialog *@
<_DeleteTicketDialog @ref="deleteTicketDialog" TicketId="ticketId" TicketDeletedEC="RefreshOnTicketDeleted"></_DeleteTicketDialog>
@* edit dialog *@
<_EditTicketDialog @ref="editTicketDialog" TicketId="ticketId" TicketEditedEC="RefreshOnTicketEdited"></_EditTicketDialog>
@*details dialog*@
<_DetailsTicketDialog @ref="detailsTicketDialog" TicketId="ticketId"></_DetailsTicketDialog>

@code {
    [Parameter]
    public List<Ticket> Tickets { get; set; }

    //another callback needed as the deleting of a tickets needs a invoking of the OnInitialize from the parent component
    [Parameter]
    public EventCallback TicketDeletedEC { get; set; }

    private _DeleteTicketDialog deleteTicketDialog;
    private _EditTicketDialog editTicketDialog;
    //private _DetailsTicket detailsTicketDialog;
    private _DetailsTicketDialog detailsTicketDialog;
    private int ticketId;

    //when eventcallback for editing is triggered we call this method
    private void RefreshOnTicketEdited()
    {
        StateHasChanged();
    }
    //when eventcallback for deleting is triggered we call this method
    //this method invokes a callback to the parent component(Index)
    private async Task RefreshOnTicketDeleted()
    {
        await TicketDeletedEC.InvokeAsync();
    }
}
